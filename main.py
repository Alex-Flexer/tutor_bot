import json
import asyncio
import logging
import sys
from os.path import join
from os import listdir

from dotenv import dotenv_values

from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state
from aiogram.types import (
    Message,
    ReplyKeyboardRemove,
    BotCommand,
    FSInputFile,
    CallbackQuery
)

from keyboards import (
    FINAL_CHECKING_STOP_TEST_KEYBOARD,
    FIRST_CHECKING_STOP_TEST_KEYBOARD,
    EXAM_TYPE_KEYBOARD,
    START_INLINE_KEYBOARD,
    EGE_INLINE_KEYBOARD,
    OGE_INLINE_KEYBOARD,
    EXAM_TYPE_INLINE_KEYBOARD
)

BOT_COMMANDS = [
    BotCommand(command="start", description="Start bot"),
    BotCommand(command="solve", description="Start solving tasks"),
    BotCommand(command="contacts", description="Get contacts")
]

config = dotenv_values(".env")
TOKEN = config["TOKEN"]

form_router = Router()


with open("answers.json", 'r', encoding='utf-8') as file:
    ANSWERS: dict[str, list[list[str]]] = json.load(file)


HELLO_TEXT = """üëã –ü—Ä–∏–≤–µ—Ç!
–¢—ã –≤ —É–º–Ω–æ–º –±–æ—Ç–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –ï–ì–≠ –∏ –û–ì–≠ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.

–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å:
‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã.
‚úÖ –ü–æ–ª—É—á–∏—à—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–∫–æ–Ω—Ç–∞–∫—Ç—ã¬ª

üöÄ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç ‚Äî –±–æ—Ç –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏—Ç!
–ò –ø–æ–º–Ω–∏: –∫–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ ‚Äî —ç—Ç–æ —à–∞–≥ –∫ 100 –±–∞–ª–ª–∞–º.

–ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–±—è? –ü–æ–≥–Ω–∞–ª–∏! üéØ
"""

CONTACS_TEXT = """–ü–æ–¥–¥–µ—Ä–∂–∫–∞:

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É Telegram-–∫–∞–Ω–∞–ª—É:
@matnas7

üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å:
@NikitaAlekseevichh
"""


async def show_results(message: Message, state: FSMContext) -> None:
    text = "–†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n"

    data = await state.get_data()

    exam_type = data["exam_type"]
    variant_idx = data["variant_idx"]
    task_idx = data["task_idx"]

    if task_idx < 5 and exam_type == "oge":
        task_img = data["task_img"]
        await task_img.delete()

    user_answers: list[str] = data.get("answers", [])
    right_answers: list[str] = ANSWERS[exam_type][variant_idx]

    cnt_right_solutions = 0

    for idx, (user_answer, right_answer) in enumerate(zip(user_answers, right_answers)):
        verdict = user_answer.replace(".", ",").replace(" ", "") == right_answer
        cnt_right_solutions += verdict
        text += f"{idx + 1}) {"+" if verdict else "-"}\n"

    text += f"\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {cnt_right_solutions}/{len(user_answers)}"

    if cnt_right_solutions == len(right_answers):
        photo = FSInputFile("./images/perfect_img.jpg")
        await message.answer_photo(
            photo,
            text,
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer(text, reply_markup=ReplyKeyboardRemove())

    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É?",
        reply_markup=(
            EXAM_TYPE_INLINE_KEYBOARD if len(user_answers) != len(right_answers)
            else (EGE_INLINE_KEYBOARD if exam_type == "ege" else OGE_INLINE_KEYBOARD)
        )
    )


async def show_task(message: Message, state: FSMContext) -> None:
    data = await state.get_data()

    exam_type = data["exam_type"]
    variant_idx = data["variant_idx"]
    task_idx = data["task_idx"]

    photo_path = join(".", exam_type, str(variant_idx), str(task_idx) + ".png")
    photo = FSInputFile(photo_path)
    caption = f"–ó–ê–î–ê–ù–ò–ï ‚Ññ{task_idx + 1}"

    if task_idx > 0:
        last_msg = data["last_msg"]
        await last_msg.delete()

    if task_idx == 5 and exam_type == "oge":
        task_img = data["task_img"]
        await task_img.delete()

    last_msg = await message.answer_photo(
        photo,
        caption=caption,
        reply_markup=FIRST_CHECKING_STOP_TEST_KEYBOARD
    )
    await state.update_data(last_msg=last_msg)


class Form(StatesGroup):
    choosing_exam = State()
    choosing_variant = State()
    solving_tasks = State()
    stopping_solving = State()


@form_router.message(CommandStart())
async def command_start(message: Message) -> None:
    photo = FSInputFile("./images/start_img.jpg")
    await message.answer_photo(
        photo,
        HELLO_TEXT,
        reply_markup=START_INLINE_KEYBOARD
    )


@form_router.message(Command("solve"))
async def command_solve(message: Message, state: FSMContext) -> None:
    if await state.get_state() == Form.solving_tasks:
        await message.answer(
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π.\n"
            "–î–ª—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ \"–°—Ç–æ–ø\"."
        )
        return

    await state.set_state(Form.choosing_exam)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞:",
        reply_markup=EXAM_TYPE_KEYBOARD,
    )


@form_router.message(Command("contacts"))
async def command_contacts(message: Message) -> None:
    await message.answer(CONTACS_TEXT)


@form_router.message(F.text.casefold() == "—Å—Ç–æ–ø", or_f(Form.solving_tasks, Form.choosing_variant))
async def process_stop_first(message: Message, state: FSMContext) -> None:
    await state.set_state(Form.stopping_solving)
    await message.answer(
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞?",
        reply_markup=FINAL_CHECKING_STOP_TEST_KEYBOARD
    )


@form_router.message(F.text.casefold() == "—Å—Ç–æ–ø", Form.stopping_solving)
async def process_stop_final(message: Message, state: FSMContext) -> None:
    await message.answer(
        "–¢–µ—Å—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
        reply_markup=EXAM_TYPE_INLINE_KEYBOARD
    )

    if await state.get_value("variant_idx") is not None:
        await show_results(message, state)

    await state.set_state(None)
    await state.update_data(answers=[], task_idx=None, variant_idx=None, task_img=None)


@form_router.message(F.text.casefold() == "—Å—Ç–æ–ø", default_state)
async def process_stop_undefined(message: Message) -> None:
    await message.answer("–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –µ–≥–æ –Ω–∞—á–∞—Ç—å.")


@form_router.message(F.text.casefold() == "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", Form.stopping_solving)
async def process_continue_solving(message: Message, state: FSMContext) -> None:
    await message.answer(
        "–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–≤–Ω–æ–≤–ª–µ–Ω–æ.",
        reply_markup=FIRST_CHECKING_STOP_TEST_KEYBOARD
    )
    await state.set_state(Form.solving_tasks)


@form_router.callback_query(F.data.startswith("start_"))
async def handle_start_buttons(callback: CallbackQuery, state: FSMContext):
    if callback.data == "start_contacts":
        await callback.message.answer(CONTACS_TEXT)
    else:
        exam_type = "oge" if callback.data == "start_oge" else "ege"
        await state.update_data(exam_type=exam_type)

        await state.set_state(Form.choosing_variant)

        max_variants = len(listdir(f"./{exam_type}"))
        await callback.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–æ—Ç 1 –¥–æ {max_variants}):",
            reply_markup=FIRST_CHECKING_STOP_TEST_KEYBOARD
        )
    await callback.answer()


@form_router.message(Form.choosing_exam, F.text.casefold().in_(["–æ–≥—ç", "–µ–≥—ç"]))
async def process_exam_choice(message: Message, state: FSMContext) -> None:
    exam_type = "oge" if message.text.casefold() == "–æ–≥—ç" else "ege"

    await state.update_data(exam_type=exam_type)
    await state.set_state(Form.choosing_variant)

    max_variants = len(listdir(f"./{exam_type}"))
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–æ—Ç 1 –¥–æ {max_variants}):",
        reply_markup=FIRST_CHECKING_STOP_TEST_KEYBOARD
    )


@form_router.message(Form.choosing_exam)
async def process_unknown_exam_type(message: Message) -> None:
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫–∑–∞–º–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")


@form_router.message(Form.choosing_variant, F.text.regexp(r'^\d+$'))
async def process_variant_number(message: Message, state: FSMContext) -> None:
    variant_number = int(message.text)

    exam_type = await state.get_value("exam_type")
    max_variants = len(listdir(f"./{exam_type}"))

    if 1 <= variant_number <= max_variants:
        variant_idx = variant_number - 1
        await state.update_data(
            variant_idx=variant_idx,
            task_idx=0,
            answers=[]
        )
        await state.set_state(Form.solving_tasks)
        await message.answer(f"–í–ê–†–ò–ê–ù–¢ ‚Ññ{variant_number}", reply_markup=ReplyKeyboardRemove())
        if exam_type == "oge":
            task_img = await message.answer_photo(FSInputFile(f"./oge/{variant_idx}/img.png"))
            await state.update_data(task_img=task_img)

        await show_task(message, state)
    else:
        await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {max_variants}")


@form_router.message(Form.choosing_variant)
async def process_invalid_variant_number(message: Message, state: FSMContext) -> None:
    exam_type = await state.get_value("exam_type")
    max_variants = len(listdir(f"./{exam_type}"))
    await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {max_variants}")


@form_router.message(Form.solving_tasks)
async def process_answer_task(message: Message, state: FSMContext) -> None:
    data = await state.get_data()

    exam_type = data["exam_type"]

    answer = message.text
    answers = data.get("answers", []) + [answer]

    task_idx = data["task_idx"] + 1
    variant_idx = data["variant_idx"]
    await state.update_data(answers=answers, task_idx=task_idx)

    max_tasks = len(listdir(join(".", exam_type, str(variant_idx)))) - (exam_type == "oge")

    if task_idx == max_tasks:
        await show_results(message, state)
        await state.set_state(None)
        await state.update_data(
            answers=[],
            task_idx=None,
            variant_idx=None
        )
    else:
        await message.delete()
        await show_task(message, state)


@form_router.message()
async def process_unknown_command(message: Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /solve —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")


async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await bot.set_my_commands(commands=BOT_COMMANDS)

    dp = Dispatcher()
    dp.include_router(form_router)

    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(stream=sys.stdout)
    asyncio.run(main())
